{"ast":null,"code":"var _asyncToGenerator = require(\"/home/amimul/Desktop/MISL/ImageReader/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nconst resolveURL = require('resolve-url');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = ({\n    target: {\n      error: {\n        code\n      }\n    }\n  }) => {\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nconst loadImage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (image) {\n    let data = image;\n\n    if (typeof image === 'undefined') {\n      return 'undefined';\n    }\n\n    if (typeof image === 'string') {\n      // Base64 Image\n      if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n        data = atob(image.split(',')[1]).split('').map(c => c.charCodeAt(0));\n      } else {\n        const resp = yield fetch(resolveURL(image));\n        data = yield resp.arrayBuffer();\n      }\n    } else if (image instanceof HTMLElement) {\n      if (image.tagName === 'IMG') {\n        data = yield loadImage(image.src);\n      }\n\n      if (image.tagName === 'VIDEO') {\n        data = yield loadImage(image.poster);\n      }\n\n      if (image.tagName === 'CANVAS') {\n        yield new Promise(resolve => {\n          image.toBlob( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (blob) {\n              data = yield readFromBlobOrFile(blob);\n              resolve();\n            });\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        });\n      }\n    } else if (image instanceof File || image instanceof Blob) {\n      data = yield readFromBlobOrFile(image);\n    }\n\n    return new Uint8Array(data);\n  });\n\n  return function loadImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadImage;","map":{"version":3,"sources":["/home/amimul/Desktop/MISL/ImageReader/node_modules/tesseract.js/src/worker/browser/loadImage.js"],"names":["resolveURL","require","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","loadImage","image","data","test","atob","split","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","File","Blob","Uint8Array","module","exports"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAGC,IAAI,IAC7B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,EAAAA,UAAU,CAACE,MAAX,GAAoB,MAAM;AACxBJ,IAAAA,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;AACD,GAFD;;AAGAH,EAAAA,UAAU,CAACI,OAAX,GAAqB,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF;AAAT;AAAV,GAAD,KAAqC;AACxDR,IAAAA,MAAM,CAACS,KAAK,CAAE,gCAA+BD,IAAK,EAAtC,CAAN,CAAN;AACD,GAFD;;AAGAP,EAAAA,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;AACD,CATD,CADF;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMc,SAAS;AAAA,+BAAG,WAAOC,KAAP,EAAiB;AACjC,QAAIC,IAAI,GAAGD,KAAX;;AACA,QAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAO,WAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACA,UAAI,yCAAyCE,IAAzC,CAA8CF,KAA9C,CAAJ,EAA0D;AACxDC,QAAAA,IAAI,GAAGE,IAAI,CAACH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAJ,CACJA,KADI,CACE,EADF,EAEJC,GAFI,CAEAC,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAFL,CAAP;AAGD,OAJD,MAIO;AACL,cAAMC,IAAI,SAASC,KAAK,CAAC3B,UAAU,CAACkB,KAAD,CAAX,CAAxB;AACAC,QAAAA,IAAI,SAASO,IAAI,CAACE,WAAL,EAAb;AACD;AACF,KAVD,MAUO,IAAIV,KAAK,YAAYW,WAArB,EAAkC;AACvC,UAAIX,KAAK,CAACY,OAAN,KAAkB,KAAtB,EAA6B;AAC3BX,QAAAA,IAAI,SAASF,SAAS,CAACC,KAAK,CAACa,GAAP,CAAtB;AACD;;AACD,UAAIb,KAAK,CAACY,OAAN,KAAkB,OAAtB,EAA+B;AAC7BX,QAAAA,IAAI,SAASF,SAAS,CAACC,KAAK,CAACc,MAAP,CAAtB;AACD;;AACD,UAAId,KAAK,CAACY,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,cAAM,IAAI1B,OAAJ,CAAaC,OAAD,IAAa;AAC7Ba,UAAAA,KAAK,CAACe,MAAN;AAAA,0CAAa,WAAO9B,IAAP,EAAgB;AAC3BgB,cAAAA,IAAI,SAASjB,kBAAkB,CAACC,IAAD,CAA/B;AACAE,cAAAA,OAAO;AACR,aAHD;;AAAA;AAAA;AAAA;AAAA;AAID,SALK,CAAN;AAMD;AACF,KAfM,MAeA,IAAIa,KAAK,YAAYgB,IAAjB,IAAyBhB,KAAK,YAAYiB,IAA9C,EAAoD;AACzDhB,MAAAA,IAAI,SAASjB,kBAAkB,CAACgB,KAAD,CAA/B;AACD;;AAED,WAAO,IAAIkB,UAAJ,CAAejB,IAAf,CAAP;AACD,GApCc;;AAAA,kBAATF,SAAS;AAAA;AAAA;AAAA,GAAf;;AAsCAoB,MAAM,CAACC,OAAP,GAAiBrB,SAAjB","sourcesContent":["const resolveURL = require('resolve-url');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = blob => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map(c => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n"]},"metadata":{},"sourceType":"script"}